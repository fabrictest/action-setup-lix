---
name: Release
on:
  workflow_call:
    outputs:
      tag:
        description: |
          The name of the released tag, or `''` if there was no release.

          Example: `v1.2.3`.
        value: ${{ jobs.action.outputs.tag }}
    secrets:
      CICD_APP_ID:
        required: true
      CICD_PRIVATE_KEY:
        required: true
jobs:
  action:
    name: Action
    permissions:
      attestations: write
      id-token: write
    runs-on: ubuntu-24.04
    outputs:
      tag: ${{ steps.release.outputs.release_created && steps.release.outputs.tag_name || '' }}
    steps:
      - name: Generate app token
        id: app-token
        uses: actions/create-github-app-token@c1a285145b9d317df6ced56c09f525b5c2b6f755 # v1.11.1
        with:
          app-id: ${{ secrets.CICD_APP_ID }}
          private-key: ${{ secrets.CICD_PRIVATE_KEY }}
      - name: Cut release
        id: release
        uses: googleapis/release-please-action@7987652d64b4581673a76e33ad5e98e3dd56832f # v4.1.3
        with:
          token: ${{ steps.app-token.outputs.token }}
          config-file: .github/release-please-config.json
          manifest-file: .github/release-please-manifest.json
          target-branch: ${{ github.ref_name }}
      - name: Check out repository
        if: ${{ steps.release.outputs.release_created }}
        id: checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.app-token.outputs.token }}
      - name: Fetch app UID
        if: ${{ steps.release.outputs.release_created && !contains(steps.release.outputs.tag_name, '-') }}
        id: app-uid
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          app_name: ${{ steps.app-token.outputs.app-slug }}[bot]
        run: |
          cat >>"$GITHUB_OUTPUT" <<EOF
          string=$(gh api "/users/$app_name" --jq .id)
          EOF
      - name: Tag major and minor versions
        # NOTE(ttlgcc): Only final releases get to bump major and minor tags.
        if: ${{ steps.release.outputs.release_created && !contains(steps.release.outputs.tag_name, '-') }}
        shell: bash
        env:
          GIT_AUTHOR_NAME: ${{ steps.app-token.outputs.app-slug }}[bot]
          GIT_AUTHOR_EMAIL: ${{ steps.app-uid.outputs.string }}+${{ steps.app-token.outputs.app-slug }}[bot]@noreply.users.github.com
          GIT_COMMITTER_NAME: ${{ steps.app-token.outputs.app-slug }}[bot]
          GIT_COMMITTER_EMAIL: ${{ steps.app-uid.outputs.string }}+${{ steps.app-token.outputs.app-slug }}[bot]@noreply.users.github.com
          tag: ${{ steps.release.outputs.tag_name }}
        run: |
          git tag --force --annotate "${tag%.*}" --message "Release ${tag%.*} → $tag"
          git tag --force --annotate "${tag%%.*}" --message "Release ${tag%%.*} → $tag"
          git push --force --tags
      - name: Download `/nix` tarballs
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          path: .
          pattern: lix-tarballs-*
          merge-multiple: true
      - name: Attest action and `/nix` tarballs
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        with:
          subject-path: |
            action.yaml
            lix-*.tar.*
      - name: Attach `/nix` tarballs to the GitHub release
        if: ${{ steps.release.outputs.release_created }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          tag: ${{ steps.release.outputs.tag_name }}
        run: |
          gh release upload "$tag" lix-*.tar.*
      - name: Mark release PR as published
        if: ${{ steps.release.outputs.release_created }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          commit: ${{ steps.release.outputs.sha }}
        run: |-
          gh pr list --search "$commit"' is:merged label:"autorelease: tagged" sort:created-desc' --limit 1 --json number --jq '.[0].number' |
              xargs -I {} -- gh pr edit {} --add-label 'autorelease: published' --remove-label 'autorelease: tagged'
