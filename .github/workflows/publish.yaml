---
name: Publish
on:
  release:
    types:
      - published
jobs:
  lix-stores:
    name: Lix stores
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      pull-requests: read
    steps:
      - name: Retrieve release PR \#
        id: pr
        run: |
          tee -a "$GITHUB_OUTPUT" <<EOF
          number=$(
            jq --raw-output .release.tag_name "$GITHUB_EVENT_PATH" |
              xargs -I '{}' -- gh pr list \
                --repo="$GITHUB_REPOSITORY" \
                --search='{} is:merged label:"autorelease: tagged" sort:created-desc' \
                --limit 1 \
                --json number \
                --jq '.[0].number'
          )
          EOF
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Download Lix stores
        id: lix-stores
        if: ${{ steps.pr.outputs.number }}
        uses: dawidd6/action-download-artifact@80620a5d27ce0ae443b965134db88467fc607b43 # v7
        with:
          github_token: ${{ github.token }}
          name: "^lix-stores-.*"
          name_is_regexp: true
          path: ${{ runner.temp }}
          pr: ${{ steps.pr.outputs.number }}
          search_artifacts: true
      - name: Verify integrity of Lix stores
        if: ${{ steps.lix-stores.outputs.found_artifact }}
        run: |
          find -L . \
              -type f \
              -name 'lix-*.tar.*' \
              -exec gh attestation verify '{}' --{,signer-}repo="$GITHUB_REPOSITORY" \;
        shell: bash
        working-directory: ${{ runner.temp }}
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Attach Lix stores to the GitHub release
        if: ${{ steps.lix-stores.outputs.found_artifact }}
        run: |
          jq --raw-output .release.tag_name "$GITHUB_EVENT_PATH" |
            xargs -I '[]' -- find -L . \
              -type f \
              -name 'lix-*.tar.*' \
              -exec gh release upload '[]' '{}' --repo="$GITHUB_REPOSITORY" \+
        shell: bash
        working-directory: ${{ runner.temp }}
        env:
          GH_TOKEN: ${{ github.token }}
  tag-sync:
    name: Tag sync
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Sync tags
        run: |

          TODO TODO TODO GITHUB_SHA TODO TODO TODO

          source=$(jq --raw-output .release.tag_name "$GITHUB_EVENT_PATH")
          for target in "${source%%.*}" "${source%.*}"; do
            gh api repos/{owner}/{repo}/git/tags \
                --raw-field tag="$target" \
                --raw-field message="Release $target â†’ $source" \
                --raw-field object="$GITHUB_SHA" \
                --raw-field type=commit \
                --template 'sha={{.sha}}' |
              xargs -- gh api repos/{owner}/{repo}/git/refs \
                --raw-field ref=refs/tags/"$target" \
                --raw-field |
              jq .
          done
        shell: bash
        env:
          GH_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
  pr:
    name: Pull request
    needs:
      - lix-stores
      - tag-sync
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Mark release PR as published
        run: |
          jq --raw-output .release.tag_name "$GITHUB_EVENT_PATH" |
            xargs -I {} -- gh pr list \
              --repo="$GITHUB_REPOSITORY" \
              --search='{} is:merged label:"autorelease: tagged" sort:created-desc' \
              --limit 1 \
              --json number \
              --jq '.[0].number' |
            xargs -I {} -- gh pr edit {} \
              --add-label='autorelease: published' \
              --remove-label='autorelease: tagged' \
              --repo="$GITHUB_REPOSITORY"
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
